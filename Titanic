{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4643ec5a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:34.990012Z",
     "iopub.status.busy": "2024-09-06T10:04:34.989216Z",
     "iopub.status.idle": "2024-09-06T10:04:35.854639Z",
     "shell.execute_reply": "2024-09-06T10:04:35.853386Z"
    },
    "papermill": {
     "duration": 0.885088,
     "end_time": "2024-09-06T10:04:35.857079",
     "exception": false,
     "start_time": "2024-09-06T10:04:34.971991",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4cfd99d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:35.890419Z",
     "iopub.status.busy": "2024-09-06T10:04:35.889279Z",
     "iopub.status.idle": "2024-09-06T10:04:35.927344Z",
     "shell.execute_reply": "2024-09-06T10:04:35.926149Z"
    },
    "papermill": {
     "duration": 0.05698,
     "end_time": "2024-09-06T10:04:35.929772",
     "exception": false,
     "start_time": "2024-09-06T10:04:35.872792",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#read csv as df\n",
    "df_test = pd.read_csv('/kaggle/input/titanic/test.csv')\n",
    "df_train = pd.read_csv('/kaggle/input/titanic/train.csv')\n",
    "\n",
    "seed= 92"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48660aa3",
   "metadata": {
    "papermill": {
     "duration": 0.015388,
     "end_time": "2024-09-06T10:04:35.960144",
     "exception": false,
     "start_time": "2024-09-06T10:04:35.944756",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# EDA (Exploratory data analysis)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24a3182c",
   "metadata": {
    "papermill": {
     "duration": 0.014555,
     "end_time": "2024-09-06T10:04:35.989438",
     "exception": false,
     "start_time": "2024-09-06T10:04:35.974883",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Data inspection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "eff1c983",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:36.021454Z",
     "iopub.status.busy": "2024-09-06T10:04:36.021020Z",
     "iopub.status.idle": "2024-09-06T10:04:36.049719Z",
     "shell.execute_reply": "2024-09-06T10:04:36.048648Z"
    },
    "papermill": {
     "duration": 0.047762,
     "end_time": "2024-09-06T10:04:36.051978",
     "exception": false,
     "start_time": "2024-09-06T10:04:36.004216",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Moran, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330877</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>McCarthy, Mr. Timothy J</td>\n",
       "      <td>male</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17463</td>\n",
       "      <td>51.8625</td>\n",
       "      <td>E46</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Master. Gosta Leonard</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>349909</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>347742</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>237736</td>\n",
       "      <td>30.0708</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "5            6         0       3   \n",
       "6            7         0       1   \n",
       "7            8         0       3   \n",
       "8            9         1       3   \n",
       "9           10         1       2   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "5                                   Moran, Mr. James    male   NaN      0   \n",
       "6                            McCarthy, Mr. Timothy J    male  54.0      0   \n",
       "7                     Palsson, Master. Gosta Leonard    male   2.0      3   \n",
       "8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n",
       "9                Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  \n",
       "5      0            330877   8.4583   NaN        Q  \n",
       "6      0             17463  51.8625   E46        S  \n",
       "7      1            349909  21.0750   NaN        S  \n",
       "8      2            347742  11.1333   NaN        S  \n",
       "9      0            237736  30.0708   NaN        C  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check first rows\n",
    "df_train.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "72780002",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:36.084711Z",
     "iopub.status.busy": "2024-09-06T10:04:36.084318Z",
     "iopub.status.idle": "2024-09-06T10:04:36.107328Z",
     "shell.execute_reply": "2024-09-06T10:04:36.106104Z"
    },
    "papermill": {
     "duration": 0.042287,
     "end_time": "2024-09-06T10:04:36.110011",
     "exception": false,
     "start_time": "2024-09-06T10:04:36.067724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "#Checking data types and null values\n",
    "df_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "309639b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:36.142729Z",
     "iopub.status.busy": "2024-09-06T10:04:36.142347Z",
     "iopub.status.idle": "2024-09-06T10:04:36.149115Z",
     "shell.execute_reply": "2024-09-06T10:04:36.148098Z"
    },
    "papermill": {
     "duration": 0.02534,
     "end_time": "2024-09-06T10:04:36.151283",
     "exception": false,
     "start_time": "2024-09-06T10:04:36.125943",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 12)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Shape of dataframe\n",
    "df_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fff19fa6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:36.183866Z",
     "iopub.status.busy": "2024-09-06T10:04:36.183479Z",
     "iopub.status.idle": "2024-09-06T10:04:36.213489Z",
     "shell.execute_reply": "2024-09-06T10:04:36.212217Z"
    },
    "papermill": {
     "duration": 0.049448,
     "end_time": "2024-09-06T10:04:36.215998",
     "exception": false,
     "start_time": "2024-09-06T10:04:36.166550",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check data metrics overview\n",
    "df_train.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f7abd60",
   "metadata": {
    "papermill": {
     "duration": 0.015953,
     "end_time": "2024-09-06T10:04:36.247633",
     "exception": false,
     "start_time": "2024-09-06T10:04:36.231680",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2. Data cleaning and checking variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "043f524d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:36.280587Z",
     "iopub.status.busy": "2024-09-06T10:04:36.280201Z",
     "iopub.status.idle": "2024-09-06T10:04:36.288142Z",
     "shell.execute_reply": "2024-09-06T10:04:36.287337Z"
    },
    "papermill": {
     "duration": 0.027126,
     "end_time": "2024-09-06T10:04:36.290556",
     "exception": false,
     "start_time": "2024-09-06T10:04:36.263430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Checking for duplicates\n",
    "df_no_duplicates = df_train.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "22b9a2f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:36.323172Z",
     "iopub.status.busy": "2024-09-06T10:04:36.322789Z",
     "iopub.status.idle": "2024-09-06T10:04:36.329357Z",
     "shell.execute_reply": "2024-09-06T10:04:36.328232Z"
    },
    "papermill": {
     "duration": 0.025608,
     "end_time": "2024-09-06T10:04:36.331586",
     "exception": false,
     "start_time": "2024-09-06T10:04:36.305978",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 12)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#No duplicates\n",
    "df_no_duplicates.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bd673c7",
   "metadata": {
    "papermill": {
     "duration": 0.015147,
     "end_time": "2024-09-06T10:04:36.362937",
     "exception": false,
     "start_time": "2024-09-06T10:04:36.347790",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Passenger Id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c869331f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:36.395661Z",
     "iopub.status.busy": "2024-09-06T10:04:36.395259Z",
     "iopub.status.idle": "2024-09-06T10:04:36.402148Z",
     "shell.execute_reply": "2024-09-06T10:04:36.401093Z"
    },
    "papermill": {
     "duration": 0.026077,
     "end_time": "2024-09-06T10:04:36.404637",
     "exception": false,
     "start_time": "2024-09-06T10:04:36.378560",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of duplicated PassengerId in the Test data frame is: 0\n",
      "The number of duplicated PassengerId in the Train data frame is: 0\n"
     ]
    }
   ],
   "source": [
    "# Checking duplicated Passenger Id\n",
    "print('The number of duplicated PassengerId in the Test data frame is: ' + str(df_test['PassengerId'].duplicated().any().sum()))\n",
    "print('The number of duplicated PassengerId in the Train data frame is: ' + str(df_train['PassengerId'].duplicated().any().sum()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26336615",
   "metadata": {
    "papermill": {
     "duration": 0.015519,
     "end_time": "2024-09-06T10:04:36.436093",
     "exception": false,
     "start_time": "2024-09-06T10:04:36.420574",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Survived"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a76ee7d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:36.469515Z",
     "iopub.status.busy": "2024-09-06T10:04:36.468777Z",
     "iopub.status.idle": "2024-09-06T10:04:36.477853Z",
     "shell.execute_reply": "2024-09-06T10:04:36.476840Z"
    },
    "papermill": {
     "duration": 0.028201,
     "end_time": "2024-09-06T10:04:36.479938",
     "exception": false,
     "start_time": "2024-09-06T10:04:36.451737",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived\n",
       "0    549\n",
       "1    342\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Count of passanger that survived versus those who didn't \n",
    "df_train['Survived'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "89706e31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:36.513765Z",
     "iopub.status.busy": "2024-09-06T10:04:36.513116Z",
     "iopub.status.idle": "2024-09-06T10:04:36.521424Z",
     "shell.execute_reply": "2024-09-06T10:04:36.520425Z"
    },
    "papermill": {
     "duration": 0.027581,
     "end_time": "2024-09-06T10:04:36.523616",
     "exception": false,
     "start_time": "2024-09-06T10:04:36.496035",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived\n",
       "0    0.616162\n",
       "1    0.383838\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Porcentaje or ratio of passanger that survived and those who didn't\n",
    "df_train['Survived'].value_counts(normalize = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf99dd59",
   "metadata": {
    "papermill": {
     "duration": 0.015638,
     "end_time": "2024-09-06T10:04:36.555373",
     "exception": false,
     "start_time": "2024-09-06T10:04:36.539735",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Pclass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ed85aba5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:36.590250Z",
     "iopub.status.busy": "2024-09-06T10:04:36.589910Z",
     "iopub.status.idle": "2024-09-06T10:04:36.617439Z",
     "shell.execute_reply": "2024-09-06T10:04:36.616377Z"
    },
    "papermill": {
     "duration": 0.046807,
     "end_time": "2024-09-06T10:04:36.619710",
     "exception": false,
     "start_time": "2024-09-06T10:04:36.572903",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>No</th>\n",
       "      <th>Yes</th>\n",
       "      <th>Total</th>\n",
       "      <th>%_survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>80</td>\n",
       "      <td>136</td>\n",
       "      <td>216</td>\n",
       "      <td>63.0%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>97</td>\n",
       "      <td>87</td>\n",
       "      <td>184</td>\n",
       "      <td>47.3%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>372</td>\n",
       "      <td>119</td>\n",
       "      <td>491</td>\n",
       "      <td>24.2%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         No  Yes  Total %_survived\n",
       "Pclass                            \n",
       "1        80  136    216      63.0%\n",
       "2        97   87    184      47.3%\n",
       "3       372  119    491      24.2%"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Pclass = pd.pivot_table(df_train, columns = 'Survived', index = 'Pclass', values = 'PassengerId', aggfunc = 'count')\n",
    "Pclass.columns = ['No','Yes']\n",
    "Pclass['Total'] = Pclass['No'] + Pclass['Yes']\n",
    "Pclass['%_survived'] =  round((Pclass['Yes'] / Pclass['Total'] * 100),1).astype(str) + '%'\n",
    "Pclass.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "77bae828",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:36.654132Z",
     "iopub.status.busy": "2024-09-06T10:04:36.653176Z",
     "iopub.status.idle": "2024-09-06T10:04:38.484151Z",
     "shell.execute_reply": "2024-09-06T10:04:38.482810Z"
    },
    "papermill": {
     "duration": 1.850902,
     "end_time": "2024-09-06T10:04:38.486733",
     "exception": false,
     "start_time": "2024-09-06T10:04:36.635831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Import visualization libraries\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "#Initialize figure with a specific size\n",
    "fig = plt.figure(figsize = (10,3))\n",
    "\n",
    "#Create the first subplot\n",
    "ax1 = fig.add_subplot(1,2,1)\n",
    "sns.countplot(data = df_test, x = 'Pclass', color= 'Blue', ax= ax1, width = 0.5, alpha = 0.9)\n",
    "ax1.set_title('Passenger count by Class')\n",
    "ax1.set_ylim([0,300])\n",
    "\n",
    "#Add a second subplot\n",
    "ax2= fig.add_subplot(1,2,2)\n",
    "df_group = df_train.groupby('Pclass')['Survived'].mean().reset_index()\n",
    "sns.barplot(data = df_group, x = 'Pclass', y= 'Survived', ax = ax2, width = 0.5)\n",
    "ax2.set_title('Survival rate by Class')\n",
    "ax2.set_ylim([0,0.9])\n",
    "\n",
    "for p in ax2.patches:\n",
    "    ax2.annotate(f'{p.get_height()*100:.1f}%' , (p.get_x() + p.get_width() / 2., p.get_height()),\n",
    "                ha='center', va='center', fontsize=9, color='black', xytext=(0, 8),\n",
    "                textcoords='offset points')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1d8e93d",
   "metadata": {
    "papermill": {
     "duration": 0.017482,
     "end_time": "2024-09-06T10:04:38.521134",
     "exception": false,
     "start_time": "2024-09-06T10:04:38.503652",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "18bc8dfe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:38.557729Z",
     "iopub.status.busy": "2024-09-06T10:04:38.556638Z",
     "iopub.status.idle": "2024-09-06T10:04:38.582112Z",
     "shell.execute_reply": "2024-09-06T10:04:38.580931Z"
    },
    "papermill": {
     "duration": 0.046195,
     "end_time": "2024-09-06T10:04:38.584622",
     "exception": false,
     "start_time": "2024-09-06T10:04:38.538427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>289</th>\n",
       "      <td>289</td>\n",
       "      <td>290</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Connolly, Miss. Kate</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370373</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>696</th>\n",
       "      <td>696</td>\n",
       "      <td>697</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>44.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>363592</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>891</th>\n",
       "      <td>0</td>\n",
       "      <td>892</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>897</th>\n",
       "      <td>6</td>\n",
       "      <td>898</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>Connolly, Miss. Kate</td>\n",
       "      <td>female</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330972</td>\n",
       "      <td>7.6292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     index  PassengerId  Survived  Pclass                  Name     Sex   Age  \\\n",
       "289    289          290       1.0       3  Connolly, Miss. Kate  female  22.0   \n",
       "696    696          697       0.0       3      Kelly, Mr. James    male  44.0   \n",
       "891      0          892       NaN       3      Kelly, Mr. James    male  34.5   \n",
       "897      6          898       NaN       3  Connolly, Miss. Kate  female  30.0   \n",
       "\n",
       "     SibSp  Parch  Ticket    Fare Cabin Embarked  \n",
       "289      0      0  370373  7.7500   NaN        Q  \n",
       "696      0      0  363592  8.0500   NaN        S  \n",
       "891      0      0  330911  7.8292   NaN        Q  \n",
       "897      0      0  330972  7.6292   NaN        Q  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#### Checkin duplicated values\n",
    "all_data = pd.concat([df_train,df_test], axis = 0).reset_index()\n",
    "all_data[all_data['Name'].duplicated()]\n",
    "all_data[(all_data['Name'] == 'Kelly, Mr. James') | (all_data['Name'] == 'Connolly, Miss. Kate')]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05f2e683",
   "metadata": {
    "papermill": {
     "duration": 0.025669,
     "end_time": "2024-09-06T10:04:38.705124",
     "exception": false,
     "start_time": "2024-09-06T10:04:38.679455",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Sex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8c5bd60e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:38.756594Z",
     "iopub.status.busy": "2024-09-06T10:04:38.756119Z",
     "iopub.status.idle": "2024-09-06T10:04:39.222475Z",
     "shell.execute_reply": "2024-09-06T10:04:39.221252Z"
    },
    "papermill": {
     "duration": 0.494555,
     "end_time": "2024-09-06T10:04:39.225973",
     "exception": false,
     "start_time": "2024-09-06T10:04:38.731418",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 0.9)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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RERERPTBKRWJ1IgRI7Bjxw4cPnwYdnZ2b63r5uYGALh16xaqVasGa2trnDp1SqlOQkICAOR7X5VcLodcLi+CyImIiAjg8w2LG59vSFT6qPUeKSEERowYga1bt2L//v2oUqXKO5c5d+4cAMDGxgYA4O7ujosXLyIxMVGqs3fvXhgZGcHZ2blY4iYiIiIiog+bWs9IBQUFISIiAn/88QcMDQ2le5qMjY2hq6uL2NhYREREoEOHDqhYsSIuXLiAMWPGoHXr1qhXrx4AwNvbG87OzujXrx/mzJmD+Ph4TJ48GUFBQTzrRERERERExUKtZ6SWLFmC5ORkeHp6wsbGRnpt3LgRAKCtrY19+/bB29sbTk5O+PLLL9GtWzds375dWoempiZ27NgBTU1NuLu7o2/fvggICFB67hQREREREVFRUusZKSHEW+fb29vj0KFD71yPg4MD/vrrr6IKi4iIiIiI6K1K1XOkiIiIiIiIygImUkRERERERCpiIkVERERERKQiJlJEREREREQqYiJFRERERESkIiZSREREREREKmIiRUREREREpCImUkRERERERCpiIkVERERERKQiJlJEREREREQqYiJFRERERESkIiZSREREREREKmIiRUREREREpCImUkRERERERCpiIkVERERERKQiJlJEREREREQqYiJFRERERESkIiZSREREREREKmIiRUREREREpCImUkRERERERCpiIkVERERERKQiJlJEREREREQqYiJFRERERESkIiZSREREREREKmIiRUREREREpCImUkRERERERCpiIkVERERERKQiJlJEREREREQqUmsiFRYWhiZNmsDQ0BCWlpbo3Lkzrl+/rlQnLS0NQUFBqFixIgwMDNCtWzckJCQo1YmLi0PHjh2hp6cHS0tLjBs3DllZWSXZFCIiKufCw8Ph6OgIHR0duLm54dSpU2+tn5SUhKCgINjY2EAul6NmzZr466+/SihaIiIqbmpNpA4dOoSgoCCcOHECe/fuRWZmJry9vZGamirVGTNmDLZv345Nmzbh0KFDePDgAbp27SrNz87ORseOHZGRkYHjx49j7dq1WLNmDaZOnaqOJhERUTm0ceNGBAcHY9q0aThz5gzq168PHx8fJCYm5lk/IyMD7dq1w927d7F582Zcv34dK1asQKVKlUo4ciIiKi4yIYRQdxA5Hj16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",
      "text/plain": [
       "<Figure size 1000x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize = (10,3))\n",
    "\n",
    "ax1 = fig.add_subplot(1,2,1)\n",
    "sns.countplot(data = df_test, x = 'Sex', width = 0.5)\n",
    "ax1.set_title('Count passenger by Sex')\n",
    "ax1.set_ylim([0,300])\n",
    "\n",
    "ax2 = fig.add_subplot(1,2,2)\n",
    "df_grouped = df_train.groupby('Sex')['Survived'].mean().reset_index()\n",
    "sns.barplot(data = df_grouped, x ='Sex', y='Survived', width = 0.5, ax=ax2)\n",
    "ax2.set_title('Rate survived by Sex')\n",
    "\n",
    "for p in ax2.patches:\n",
    "    ax2.annotate(f'{p.get_height()*100:.1f}%' , (p.get_x() + p.get_width() / 2., p.get_height()),\n",
    "                ha='center', fontsize=9, xytext=(0, 8),textcoords='offset points')\n",
    "    \n",
    "ax2.set_ylim([0,0.9])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28d9357e",
   "metadata": {
    "papermill": {
     "duration": 0.025289,
     "end_time": "2024-09-06T10:04:39.276805",
     "exception": false,
     "start_time": "2024-09-06T10:04:39.251516",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d36275d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:39.320831Z",
     "iopub.status.busy": "2024-09-06T10:04:39.319633Z",
     "iopub.status.idle": "2024-09-06T10:04:39.333085Z",
     "shell.execute_reply": "2024-09-06T10:04:39.331761Z"
    },
    "papermill": {
     "duration": 0.036006,
     "end_time": "2024-09-06T10:04:39.335733",
     "exception": false,
     "start_time": "2024-09-06T10:04:39.299727",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The count of null values in the age column is: 86\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0      34.5\n",
       "1      47.0\n",
       "2      62.0\n",
       "3      27.0\n",
       "4      22.0\n",
       "       ... \n",
       "413     0.0\n",
       "414    39.0\n",
       "415    38.5\n",
       "416     0.0\n",
       "417     0.0\n",
       "Name: Age, Length: 418, dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking null values in the age column\n",
    "print('The count of null values in the age column is: ' + str(df_test['Age'].isna().sum()))\n",
    "df_test['Age'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "317767ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:39.374956Z",
     "iopub.status.busy": "2024-09-06T10:04:39.374586Z",
     "iopub.status.idle": "2024-09-06T10:04:39.387866Z",
     "shell.execute_reply": "2024-09-06T10:04:39.386729Z"
    },
    "papermill": {
     "duration": 0.035899,
     "end_time": "2024-09-06T10:04:39.390233",
     "exception": false,
     "start_time": "2024-09-06T10:04:39.354334",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pclass  Sex   \n",
       "1       female    35.0\n",
       "        male      40.0\n",
       "2       female    28.0\n",
       "        male      30.0\n",
       "3       female    21.5\n",
       "Name: Age, dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "age_median = df_train.groupby(['Pclass','Sex'])['Age'].median()\n",
    "age_median.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d59b20e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:39.428879Z",
     "iopub.status.busy": "2024-09-06T10:04:39.428407Z",
     "iopub.status.idle": "2024-09-06T10:04:39.464518Z",
     "shell.execute_reply": "2024-09-06T10:04:39.463365Z"
    },
    "papermill": {
     "duration": 0.058663,
     "end_time": "2024-09-06T10:04:39.467206",
     "exception": false,
     "start_time": "2024-09-06T10:04:39.408543",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_train['Age'] = df_train.apply(lambda x: age_median.loc[(x['Pclass'], x['Sex'])] if np.isnan(x['Age']) else x['Age'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a702ad6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:39.512229Z",
     "iopub.status.busy": "2024-09-06T10:04:39.511844Z",
     "iopub.status.idle": "2024-09-06T10:04:39.520056Z",
     "shell.execute_reply": "2024-09-06T10:04:39.519043Z"
    },
    "papermill": {
     "duration": 0.030465,
     "end_time": "2024-09-06T10:04:39.522439",
     "exception": false,
     "start_time": "2024-09-06T10:04:39.491974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_train.replace([np.inf, -np.inf], np.nan, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "adfe324f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:39.567173Z",
     "iopub.status.busy": "2024-09-06T10:04:39.566803Z",
     "iopub.status.idle": "2024-09-06T10:04:40.186634Z",
     "shell.execute_reply": "2024-09-06T10:04:40.185485Z"
    },
    "papermill": {
     "duration": 0.645617,
     "end_time": "2024-09-06T10:04:40.188924",
     "exception": false,
     "start_time": "2024-09-06T10:04:39.543307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x700 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize= (10,7))\n",
    "\n",
    "ax1 = fig.add_subplot(2,2,1)\n",
    "sns.histplot(data=df_train, x='Age', bins = 15, ax= ax1)\n",
    "ax1.set_title('Histogram by Age test data')\n",
    "\n",
    "ax2 = fig.add_subplot(2,2,2)\n",
    "sns.histplot(data=df_test, x='Age', bins = 15, ax= ax2)\n",
    "ax2.set_title('Histogram by Age train data')\n",
    "\n",
    "ax3 = fig.add_subplot(2,2,3)\n",
    "sns.boxplot(data = df_train.dropna(subset=['Age']), x = 'Survived', y= 'Age',ax = ax3)\n",
    "ax3.set_xticks([0,1],['Didnt Survived','Survived'])\n",
    "ax3.set_title('Boxplot passgener survived by age')\n",
    "\n",
    "plt.subplots_adjust(hspace=0.5, wspace=0.3)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e55115a2",
   "metadata": {
    "papermill": {
     "duration": 0.018762,
     "end_time": "2024-09-06T10:04:40.226952",
     "exception": false,
     "start_time": "2024-09-06T10:04:40.208190",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Sibsp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d0af4f82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:40.266953Z",
     "iopub.status.busy": "2024-09-06T10:04:40.266568Z",
     "iopub.status.idle": "2024-09-06T10:04:40.779986Z",
     "shell.execute_reply": "2024-09-06T10:04:40.778862Z"
    },
    "papermill": {
     "duration": 0.536526,
     "end_time": "2024-09-06T10:04:40.782377",
     "exception": false,
     "start_time": "2024-09-06T10:04:40.245851",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 0.9)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize = (10,3))\n",
    "\n",
    "ax1 = fig.add_subplot(1,2,1)\n",
    "sns.countplot(data = df_train, x='SibSp', ax = ax1, width = 0.5)\n",
    "ax1.set_title('Count passengers by Sibsp')\n",
    "ax1.set_ylim([0,700])\n",
    "\n",
    "ax2 = fig.add_subplot(1,2,2)\n",
    "df_grouped = df_train.groupby('SibSp')['Survived'].mean().reset_index()\n",
    "sns.barplot(data = df_grouped, x = 'SibSp', y = 'Survived', width = 0.5, ax = ax2)\n",
    "ax2.set_title('Rate of survived by SibSp')\n",
    "\n",
    "for p in ax2.patches:\n",
    "    ax2.annotate(f'{p.get_height()*100:.1f}%', (p.get_x() + p.get_width() / 2., p.get_height()), \n",
    "                    ha = 'center', xytext = (0,8), textcoords = 'offset points')\n",
    "    \n",
    "ax2.set_ylim([0,0.9])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a017f4c8",
   "metadata": {
    "papermill": {
     "duration": 0.019571,
     "end_time": "2024-09-06T10:04:40.821211",
     "exception": false,
     "start_time": "2024-09-06T10:04:40.801640",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Parch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "66c4ccb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:40.861773Z",
     "iopub.status.busy": "2024-09-06T10:04:40.861386Z",
     "iopub.status.idle": "2024-09-06T10:04:41.379254Z",
     "shell.execute_reply": "2024-09-06T10:04:41.378256Z"
    },
    "papermill": {
     "duration": 0.541016,
     "end_time": "2024-09-06T10:04:41.381709",
     "exception": false,
     "start_time": "2024-09-06T10:04:40.840693",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize = (10,3))\n",
    "\n",
    "ax1 = fig.add_subplot(1,2,1)\n",
    "sns.countplot(data = df_train, x='Parch', ax = ax1, width = 0.5)\n",
    "ax1.set_title('Count passengers by ParCh')\n",
    "ax1.set_ylim([0,700])\n",
    "\n",
    "ax2 = fig.add_subplot(1,2,2)\n",
    "df_grouped = df_train.groupby('Parch')['Survived'].mean().reset_index()\n",
    "sns.barplot(data = df_grouped, x = 'Parch', y = 'Survived', width = 0.5, ax = ax2)\n",
    "ax2.set_ylim([0,0.9])\n",
    "ax2.set_title('Rate of survived by parch')\n",
    "\n",
    "for p in ax2.patches:\n",
    "    ax2.annotate(f'{p.get_height()*100:.1f}%', (p.get_x() + p.get_width() / 2., p.get_height()), \n",
    "                    ha = 'center', xytext = (0,8), textcoords = 'offset points')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b55ffd5",
   "metadata": {
    "papermill": {
     "duration": 0.020149,
     "end_time": "2024-09-06T10:04:41.423140",
     "exception": false,
     "start_time": "2024-09-06T10:04:41.402991",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Ticket"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f24c68d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:41.468883Z",
     "iopub.status.busy": "2024-09-06T10:04:41.468156Z",
     "iopub.status.idle": "2024-09-06T10:04:41.477751Z",
     "shell.execute_reply": "2024-09-06T10:04:41.476710Z"
    },
    "papermill": {
     "duration": 0.034615,
     "end_time": "2024-09-06T10:04:41.480088",
     "exception": false,
     "start_time": "2024-09-06T10:04:41.445473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ticket\n",
       "347082      7\n",
       "CA. 2343    7\n",
       "1601        7\n",
       "3101295     6\n",
       "CA 2144     6\n",
       "           ..\n",
       "9234        1\n",
       "19988       1\n",
       "2693        1\n",
       "PC 17612    1\n",
       "370376      1\n",
       "Name: count, Length: 681, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train['Ticket'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d0712aa",
   "metadata": {
    "papermill": {
     "duration": 0.020673,
     "end_time": "2024-09-06T10:04:41.520759",
     "exception": false,
     "start_time": "2024-09-06T10:04:41.500086",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Fare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "81cca5c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:41.562636Z",
     "iopub.status.busy": "2024-09-06T10:04:41.562226Z",
     "iopub.status.idle": "2024-09-06T10:04:42.155399Z",
     "shell.execute_reply": "2024-09-06T10:04:42.154021Z"
    },
    "papermill": {
     "duration": 0.61727,
     "end_time": "2024-09-06T10:04:42.158175",
     "exception": false,
     "start_time": "2024-09-06T10:04:41.540905",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.axis.XTick at 0x7dff25d1e9b0>,\n",
       " <matplotlib.axis.XTick at 0x7dff25d1db10>]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize = (10,5))\n",
    "\n",
    "ax1 = fig.add_subplot(1,2,1)\n",
    "sns.histplot(data = df_train, x = 'Fare', bins = 18, ax = ax1, hue = 'Survived')\n",
    "ax1.set_title('Histogram by fare')\n",
    "\n",
    "ax2 = fig.add_subplot(1,2,2)\n",
    "data_grouped = df_train.groupby('Fare')['Survived'].mean().reset_index()\n",
    "sns.boxplot(data = df_train[df_train['Fare'] < 500], x = 'Survived', y= 'Fare', ax= ax2)\n",
    "ax2.set_title('Rate passenger survived by fare')\n",
    "ax2.set_xticks([0,1],['Did not survived','Survived'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abed6416",
   "metadata": {
    "papermill": {
     "duration": 0.021149,
     "end_time": "2024-09-06T10:04:42.200303",
     "exception": false,
     "start_time": "2024-09-06T10:04:42.179154",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Cabin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f69121be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:42.244090Z",
     "iopub.status.busy": "2024-09-06T10:04:42.243714Z",
     "iopub.status.idle": "2024-09-06T10:04:42.253261Z",
     "shell.execute_reply": "2024-09-06T10:04:42.252011Z"
    },
    "papermill": {
     "duration": 0.034291,
     "end_time": "2024-09-06T10:04:42.255764",
     "exception": false,
     "start_time": "2024-09-06T10:04:42.221473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cabin\n",
       "B96 B98        4\n",
       "G6             4\n",
       "C23 C25 C27    4\n",
       "C22 C26        3\n",
       "F33            3\n",
       "              ..\n",
       "E34            1\n",
       "C7             1\n",
       "C54            1\n",
       "E36            1\n",
       "C148           1\n",
       "Name: count, Length: 147, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train['Cabin'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8c89475",
   "metadata": {
    "papermill": {
     "duration": 0.021257,
     "end_time": "2024-09-06T10:04:42.298925",
     "exception": false,
     "start_time": "2024-09-06T10:04:42.277668",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Embarked"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d80d1701",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:42.343773Z",
     "iopub.status.busy": "2024-09-06T10:04:42.343396Z",
     "iopub.status.idle": "2024-09-06T10:04:42.777560Z",
     "shell.execute_reply": "2024-09-06T10:04:42.776450Z"
    },
    "papermill": {
     "duration": 0.45927,
     "end_time": "2024-09-06T10:04:42.780080",
     "exception": false,
     "start_time": "2024-09-06T10:04:42.320810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Embarked\n",
       "S    644\n",
       "C    168\n",
       "Q     77\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize = (10,5))\n",
    "\n",
    "ax1 = fig.add_subplot(1,2,1)\n",
    "sns.countplot(df_train.sort_values(by = 'Embarked', ascending = False), x= 'Embarked', ax = ax1, width = 0.5)\n",
    "ax1.set_title('Count Passenger by embarked')\n",
    "ax1.set_ylim([0,800])\n",
    "\n",
    "\n",
    "ax2 = fig.add_subplot(1,2,2)\n",
    "df_grouped = df_train.groupby('Embarked')['Survived'].mean().reset_index().sort_values(by = 'Embarked', ascending =False)\n",
    "sns.barplot(df_grouped, x = 'Embarked', y = 'Survived', width = 0.5, ax = ax2)\n",
    "ax2.set_title('Raked passenger survived by embarked')\n",
    "ax2.set_ylim([0,0.7])\n",
    "\n",
    "for p in ax2.patches: \n",
    "    ax2.annotate(f'{p.get_height()*100:.1f}%',(p.get_x() + p.get_width() / 2., p.get_height()),\n",
    "                                               ha='center', xytext = (0,8), textcoords = 'offset points')\n",
    "\n",
    "df_train['Embarked'].value_counts()\n",
    "#df_train['Embarked'].isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c05b178",
   "metadata": {
    "papermill": {
     "duration": 0.022212,
     "end_time": "2024-09-06T10:04:42.825228",
     "exception": false,
     "start_time": "2024-09-06T10:04:42.803016",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Correlations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f9448b44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:42.871322Z",
     "iopub.status.busy": "2024-09-06T10:04:42.870859Z",
     "iopub.status.idle": "2024-09-06T10:04:43.341460Z",
     "shell.execute_reply": "2024-09-06T10:04:43.340280Z"
    },
    "papermill": {
     "duration": 0.496928,
     "end_time": "2024-09-06T10:04:43.344030",
     "exception": false,
     "start_time": "2024-09-06T10:04:42.847102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_numeric = df_train.select_dtypes(include = [np.number])\n",
    "corr= df_numeric.corr()\n",
    "plt.figure(figsize= (10,10))\n",
    "sns.heatmap(corr, annot=True, cmap='coolwarm', vmin=-1, vmax=1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0bd954d",
   "metadata": {
    "papermill": {
     "duration": 0.022589,
     "end_time": "2024-09-06T10:04:43.389488",
     "exception": false,
     "start_time": "2024-09-06T10:04:43.366899",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3. Feature Engineering "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1a43916",
   "metadata": {
    "papermill": {
     "duration": 0.024228,
     "end_time": "2024-09-06T10:04:43.436760",
     "exception": false,
     "start_time": "2024-09-06T10:04:43.412532",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Imputing Nulls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "bd165f1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:43.484494Z",
     "iopub.status.busy": "2024-09-06T10:04:43.484101Z",
     "iopub.status.idle": "2024-09-06T10:04:43.490628Z",
     "shell.execute_reply": "2024-09-06T10:04:43.489441Z"
    },
    "papermill": {
     "duration": 0.033257,
     "end_time": "2024-09-06T10:04:43.493078",
     "exception": false,
     "start_time": "2024-09-06T10:04:43.459821",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Replace nulls values for the most frequent one\n",
    "df_train['Embarked'] = df_train['Embarked'].replace(np.nan,'S')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfaa022c",
   "metadata": {
    "papermill": {
     "duration": 0.02347,
     "end_time": "2024-09-06T10:04:43.539927",
     "exception": false,
     "start_time": "2024-09-06T10:04:43.516457",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Creating new features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "01dcf555",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:43.587689Z",
     "iopub.status.busy": "2024-09-06T10:04:43.587254Z",
     "iopub.status.idle": "2024-09-06T10:04:43.596114Z",
     "shell.execute_reply": "2024-09-06T10:04:43.594973Z"
    },
    "papermill": {
     "duration": 0.035406,
     "end_time": "2024-09-06T10:04:43.598511",
     "exception": false,
     "start_time": "2024-09-06T10:04:43.563105",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Convert float to numeric, and null cases transform to 0\n",
    "df_test['Age'] = df_test['Age'].fillna(0).astype(int)\n",
    "df_test['Fare'] = df_test['Fare'].fillna(0).astype(int)\n",
    "\n",
    "df_train['Age'] = df_train['Age'].fillna(0).astype(int)\n",
    "df_train['Fare'] = df_train['Fare'].fillna(0).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "9fe77857",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:43.646428Z",
     "iopub.status.busy": "2024-09-06T10:04:43.645986Z",
     "iopub.status.idle": "2024-09-06T10:04:44.046914Z",
     "shell.execute_reply": "2024-09-06T10:04:44.045565Z"
    },
    "papermill": {
     "duration": 0.427991,
     "end_time": "2024-09-06T10:04:44.049423",
     "exception": false,
     "start_time": "2024-09-06T10:04:43.621432",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Initialize LabelEncoder\n",
    "label_encoder = LabelEncoder()\n",
    "\n",
    "full_data = [df_train, df_test] #Create full_data, memory reference will apply any change on full_data in df_train and df_test as well\n",
    "\n",
    "for dataset in full_data:\n",
    "    \n",
    "    #Calculate size of family, including Passenger\n",
    "    dataset['family_size'] = dataset['SibSp'] + dataset['Parch'] + 1\n",
    "    dataset['family_size'] = dataset['family_size'].map({1: 'Alone', 2: 'Small', 3: 'Small', 4: 'Small', 5: 'Medium', 6: 'Medium', 7: 'Large', 8: 'Large', 11: 'Large'})\n",
    "\n",
    "    #Maping Sex from text to number\n",
    "    dataset['Sex'] = dataset['Sex'].map({'male':0, 'female':1})\n",
    "    \n",
    "    #Is passenger alone?\n",
    "    dataset['is_alone'] = dataset['family_size'].apply(lambda x: 1 if x == 1 else 0 )\n",
    "    \n",
    "    #Has cabin?\n",
    "    dataset['has_cabin'] = dataset['Cabin'].apply(lambda x: 0 if pd.isnull(x) else 1 )\n",
    "    \n",
    "    #Cabin Letter\n",
    "    dataset['Cabin_letter'] = dataset['Cabin'].str[:1]\n",
    "    dataset['Cabin_letter'] = dataset['Cabin_letter'].replace(np.nan,'Unknown')\n",
    "    \n",
    "    #Title\n",
    "    dataset['Name'] =  dataset['Name'].apply(lambda x: \" \".join([v.strip(\",()[].\\\"'\") for v in x.split(\" \")]))\n",
    "    dataset['title'] = dataset['Name'].str.split(' ').str[1]\n",
    "    dataset['title'] = dataset['title'].apply(lambda x: x if x in ['Mr','Miss','Mrs', 'Master'] else 'Others')\n",
    "    \n",
    "    #Age bins (10)\n",
    "    \n",
    "    q1, q2 , q3 = np.percentile(dataset['Age'],[25,50,75])\n",
    "    iqr = q3 - q1\n",
    "\n",
    "    number_bins = 10\n",
    "    age_bins = np.linspace(start = 0, stop = dataset['Age'].max(), num = number_bins + 1)\n",
    "\n",
    "    age_bins_labels = []\n",
    "    for i in range(len(age_bins) - 1):\n",
    "        age_bins_labels.append('from {} to {}'.format(age_bins[i], age_bins[i+1]))\n",
    "\n",
    "    dataset['Age_bin'] = pd.cut(dataset['Age'], bins = age_bins, labels = age_bins_labels)\n",
    "    dataset['Age_bin'] = dataset['Age_bin'].astype(str)\n",
    "    \n",
    "    #Fare bins (5)\n",
    "    q1, q2, q3 = np.percentile(dataset['Fare'],[25,50,75])\n",
    "    iqr = q3 - q1\n",
    "    \n",
    "    fare_bins = [-np.inf, q1, q2, q3, q3 + (1.5*iqr), np.inf]\n",
    "    fare_labels = []\n",
    "    \n",
    "    for i in range(len(fare_bins)-1):\n",
    "        fare_labels.append('from {} to {}'.format(fare_bins[i], fare_bins[i+1]))\n",
    "    \n",
    "    dataset['Fare_bin'] = pd.cut(dataset['Fare'], bins = fare_bins , labels = fare_labels)\n",
    "    dataset['Fare_bin'] =  dataset['Fare_bin'].astype(str)\n",
    "    \n",
    "    #Variables interaction     \n",
    "\n",
    "    dataset[\"Age_bin_Sex\"] = dataset[\"Age_bin\"].astype(str) + \"_\" + dataset[\"Sex\"].astype(str)\n",
    "    dataset[\"Age_bin_Pclass\"] = dataset[\"Age_bin\"].astype(str) + \"_\" + dataset[\"Pclass\"].astype(str)\n",
    "\n",
    "    dataset[\"Fare_bin_Sex\"] = dataset[\"Fare_bin\"].astype(str) + \"_\" + dataset[\"Sex\"].astype(str)\n",
    "    dataset[\"Fare_bin_Pclass\"] = dataset[\"Fare_bin\"].astype(str) + \"_\" + dataset[\"Pclass\"].astype(str)\n",
    "\n",
    "    dataset[\"Pclass_Sex\"] = dataset[\"Pclass\"].astype(str) + \"_\" + dataset[\"Sex\"].astype(str)\n",
    "    dataset[\"Pclass_Title\"] = dataset[\"Pclass\"].astype(str) + \"_\" + dataset[\"title\"]\n",
    "    dataset[\"Sex_Title\"] = dataset[\"Sex\"].astype(str) + \"_\" + dataset[\"title\"]\n",
    "\n",
    "    dataset[\"Age_bin_Title\"] = dataset[\"Age_bin\"].astype(str) + \"_\" + dataset[\"title\"]\n",
    "    dataset[\"Fare_bin_Title\"] = dataset[\"Fare_bin\"].astype(str) + \"_\" + dataset[\"title\"]\n",
    "\n",
    "    dataset['Fam_Size_Cabin']= dataset[\"family_size\"].astype(str) + \"_\" + dataset[\"Cabin_letter\"].astype(str)\n",
    "    dataset['Fam_Size_Parch']= dataset[\"family_size\"].astype(str) + \"_\" + dataset[\"Parch\"].astype(str)\n",
    "    dataset['Fam_Size_Fare_bin']= dataset[\"family_size\"].astype(str) + \"_\" + dataset[\"Fare_bin\"].astype(str)\n",
    "\n",
    "    dataset['SibSp_Parch_Ratio'] = dataset.apply(lambda x: x['SibSp'] / dataset.loc[x.name, 'Parch'] if dataset.loc[x.name, 'Parch'] != 0 else 0, axis=1)\n",
    "    dataset['Age_bin_Fare_bin']= dataset[\"Age_bin\"].astype(str) + \"_\" + dataset[\"Fare_bin\"].astype(str)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64d6a8ad",
   "metadata": {
    "papermill": {
     "duration": 0.022602,
     "end_time": "2024-09-06T10:04:44.095726",
     "exception": false,
     "start_time": "2024-09-06T10:04:44.073124",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Drop Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "71c07959",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:44.144075Z",
     "iopub.status.busy": "2024-09-06T10:04:44.143692Z",
     "iopub.status.idle": "2024-09-06T10:04:44.153543Z",
     "shell.execute_reply": "2024-09-06T10:04:44.152362Z"
    },
    "papermill": {
     "duration": 0.036558,
     "end_time": "2024-09-06T10:04:44.155976",
     "exception": false,
     "start_time": "2024-09-06T10:04:44.119418",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "cols_to_drop=['Name','Ticket','Cabin']\n",
    "for df in [df_train,df_test]:\n",
    "    df.drop(columns=cols_to_drop, inplace= True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "338ca270",
   "metadata": {
    "papermill": {
     "duration": 0.022744,
     "end_time": "2024-09-06T10:04:44.202311",
     "exception": false,
     "start_time": "2024-09-06T10:04:44.179567",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## One-Hot Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7bd6219a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:44.250285Z",
     "iopub.status.busy": "2024-09-06T10:04:44.249142Z",
     "iopub.status.idle": "2024-09-06T10:04:44.257719Z",
     "shell.execute_reply": "2024-09-06T10:04:44.256460Z"
    },
    "papermill": {
     "duration": 0.034933,
     "end_time": "2024-09-06T10:04:44.260089",
     "exception": false,
     "start_time": "2024-09-06T10:04:44.225156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Embarked', 'family_size', 'Cabin_letter', 'title', 'Age_bin',\n",
      "       'Fare_bin', 'Age_bin_Sex', 'Age_bin_Pclass', 'Fare_bin_Sex',\n",
      "       'Fare_bin_Pclass', 'Pclass_Sex', 'Pclass_Title', 'Sex_Title',\n",
      "       'Age_bin_Title', 'Fare_bin_Title', 'Fam_Size_Cabin', 'Fam_Size_Parch',\n",
      "       'Fam_Size_Fare_bin', 'Age_bin_Fare_bin'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "string_columns = df_train.select_dtypes(include = ['object']).columns\n",
    "print(string_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "858762fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:44.307984Z",
     "iopub.status.busy": "2024-09-06T10:04:44.307569Z",
     "iopub.status.idle": "2024-09-06T10:04:44.349237Z",
     "shell.execute_reply": "2024-09-06T10:04:44.348329Z"
    },
    "papermill": {
     "duration": 0.06821,
     "end_time": "2024-09-06T10:04:44.351721",
     "exception": false,
     "start_time": "2024-09-06T10:04:44.283511",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_train = pd.get_dummies(df_train, \n",
    "                          prefix = string_columns, \n",
    "                          columns = string_columns)\n",
    "\n",
    "df_test = pd.get_dummies(df_test, \n",
    "                         prefix = string_columns, \n",
    "                         columns = string_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "089e43f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:44.399889Z",
     "iopub.status.busy": "2024-09-06T10:04:44.399476Z",
     "iopub.status.idle": "2024-09-06T10:04:44.405834Z",
     "shell.execute_reply": "2024-09-06T10:04:44.404720Z"
    },
    "papermill": {
     "duration": 0.033214,
     "end_time": "2024-09-06T10:04:44.408138",
     "exception": false,
     "start_time": "2024-09-06T10:04:44.374924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of columns train df = 311\n",
      "number of columns train df = 302\n"
     ]
    }
   ],
   "source": [
    "print('number of columns train df = ' + str(df_train.shape[1]))\n",
    "print('number of columns train df = ' + str(df_test.shape[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "e6c11f11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:44.456876Z",
     "iopub.status.busy": "2024-09-06T10:04:44.456509Z",
     "iopub.status.idle": "2024-09-06T10:04:44.465889Z",
     "shell.execute_reply": "2024-09-06T10:04:44.464641Z"
    },
    "papermill": {
     "duration": 0.036581,
     "end_time": "2024-09-06T10:04:44.468340",
     "exception": false,
     "start_time": "2024-09-06T10:04:44.431759",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_train, df_test = df_train.align(df_test, axis=1, fill_value=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "525b33de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:44.516453Z",
     "iopub.status.busy": "2024-09-06T10:04:44.516020Z",
     "iopub.status.idle": "2024-09-06T10:04:44.521953Z",
     "shell.execute_reply": "2024-09-06T10:04:44.520877Z"
    },
    "papermill": {
     "duration": 0.033283,
     "end_time": "2024-09-06T10:04:44.524662",
     "exception": false,
     "start_time": "2024-09-06T10:04:44.491379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of columns train df = 446\n",
      "number of columns train df = 446\n"
     ]
    }
   ],
   "source": [
    "print('number of columns train df = ' + str(df_train.shape[1]))\n",
    "print('number of columns train df = ' + str(df_test.shape[1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d040bf1",
   "metadata": {
    "papermill": {
     "duration": 0.023377,
     "end_time": "2024-09-06T10:04:44.570912",
     "exception": false,
     "start_time": "2024-09-06T10:04:44.547535",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Feature selection"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ee9a47f",
   "metadata": {
    "papermill": {
     "duration": 0.023226,
     "end_time": "2024-09-06T10:04:44.617749",
     "exception": false,
     "start_time": "2024-09-06T10:04:44.594523",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We will keep just columns with 10% or more of data to avoid overfitting.\n",
    "\n",
    "If the column has less than 10% wi will evaulate the correlation with the Survived column, if it is less than 15% the column will be removed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4cd938d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:44.665482Z",
     "iopub.status.busy": "2024-09-06T10:04:44.665058Z",
     "iopub.status.idle": "2024-09-06T10:04:45.211147Z",
     "shell.execute_reply": "2024-09-06T10:04:45.209970Z"
    },
    "papermill": {
     "duration": 0.572984,
     "end_time": "2024-09-06T10:04:45.213644",
     "exception": false,
     "start_time": "2024-09-06T10:04:44.640660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "corr_with_survived= df_train.corr()[['Survived']] \n",
    "\n",
    "#Check each column \n",
    "binary_columns = [column for column in df_train.columns\n",
    "                 if set(df_train[column].unique()) == {0,1}\n",
    "                  and df_train[column].sum() / df_train.shape[0] > 0.1 \n",
    "                  and abs(corr_with_survived.loc[column].values[0]) >= 0.15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ef99ed46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:45.261945Z",
     "iopub.status.busy": "2024-09-06T10:04:45.261535Z",
     "iopub.status.idle": "2024-09-06T10:04:45.268624Z",
     "shell.execute_reply": "2024-09-06T10:04:45.267647Z"
    },
    "papermill": {
     "duration": 0.034125,
     "end_time": "2024-09-06T10:04:45.270909",
     "exception": false,
     "start_time": "2024-09-06T10:04:45.236784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "36"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "if 'Survived' in binary_columns:\n",
    "    binary_columns.remove('Survived')\n",
    "    \n",
    "len(binary_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a099d88c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:45.320219Z",
     "iopub.status.busy": "2024-09-06T10:04:45.319358Z",
     "iopub.status.idle": "2024-09-06T10:04:45.356572Z",
     "shell.execute_reply": "2024-09-06T10:04:45.355546Z"
    },
    "papermill": {
     "duration": 0.064086,
     "end_time": "2024-09-06T10:04:45.358918",
     "exception": false,
     "start_time": "2024-09-06T10:04:45.294832",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "non_binary_columns = [col for col in df_train.columns\n",
    "                   if set(df_train[col].unique()) != {0,1} and col != 'PassengerId' \n",
    "                     and df_train[col].sum() > 0] \n",
    "len(non_binary_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "73c833f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:45.408486Z",
     "iopub.status.busy": "2024-09-06T10:04:45.408062Z",
     "iopub.status.idle": "2024-09-06T10:04:45.414917Z",
     "shell.execute_reply": "2024-09-06T10:04:45.413850Z"
    },
    "papermill": {
     "duration": 0.035156,
     "end_time": "2024-09-06T10:04:45.417377",
     "exception": false,
     "start_time": "2024-09-06T10:04:45.382221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Age', 'Fare', 'Parch', 'Pclass', 'SibSp', 'SibSp_Parch_Ratio']"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "non_binary_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3729ff1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:45.466316Z",
     "iopub.status.busy": "2024-09-06T10:04:45.465461Z",
     "iopub.status.idle": "2024-09-06T10:04:45.471989Z",
     "shell.execute_reply": "2024-09-06T10:04:45.471022Z"
    },
    "papermill": {
     "duration": 0.033233,
     "end_time": "2024-09-06T10:04:45.474098",
     "exception": false,
     "start_time": "2024-09-06T10:04:45.440865",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "42"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features = binary_columns + non_binary_columns\n",
    "len(features)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0a00394",
   "metadata": {
    "papermill": {
     "duration": 0.023214,
     "end_time": "2024-09-06T10:04:45.520834",
     "exception": false,
     "start_time": "2024-09-06T10:04:45.497620",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4. Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "151e06a8",
   "metadata": {
    "papermill": {
     "duration": 0.023071,
     "end_time": "2024-09-06T10:04:45.567186",
     "exception": false,
     "start_time": "2024-09-06T10:04:45.544115",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "8eba6686",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:45.616501Z",
     "iopub.status.busy": "2024-09-06T10:04:45.615723Z",
     "iopub.status.idle": "2024-09-06T10:04:45.908291Z",
     "shell.execute_reply": "2024-09-06T10:04:45.907238Z"
    },
    "papermill": {
     "duration": 0.320121,
     "end_time": "2024-09-06T10:04:45.911047",
     "exception": false,
     "start_time": "2024-09-06T10:04:45.590926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV, train_test_split, StratifiedKFold\n",
    "from xgboost import XGBClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "52d3073f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:45.959776Z",
     "iopub.status.busy": "2024-09-06T10:04:45.958828Z",
     "iopub.status.idle": "2024-09-06T10:04:45.966722Z",
     "shell.execute_reply": "2024-09-06T10:04:45.965568Z"
    },
    "papermill": {
     "duration": 0.034664,
     "end_time": "2024-09-06T10:04:45.968965",
     "exception": false,
     "start_time": "2024-09-06T10:04:45.934301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\n%%time\\n\\n#split data frame in training and validation dataframes\\nX_train, X_val, y_train, y_val = train_test_split(df_train[features], df_train['Survived'], train_size = 0.7, random_state = seed)\\n\\n#Declare parameters for tunning\\nparam_grid = {\\n    'n_estimators' : [50, 100, 150, 200 ],\\n    'min_child_weight': [1, 3 ,5 , 7 ],\\n    'learning_rate': [0.01, 0.05, 0.1 ],\\n    'max_depth' : [1, 3, 5, 7 ],\\n    'colsample_bytree' : [0.6, 0.8, 1.0 ],\\n    'reg_alpha': [0, 0.1, 1, 10],\\n    'early_stopping_rounds': [10, 15, 20]\\n}\\n\\n#Declare Object xgb from XGBClassifier\\nxgb = XGBClassifier()\\n\\n#Create stratification variable\\ncv_strat = StratifiedKFold(n_splits = 5, shuffle = True, random_state = seed)\\n#Use GridSearchCV to find best hyperparameters\\ngrid_search = GridSearchCV(xgb, cv = cv_strat, param_grid = param_grid, n_jobs = -1, verbose = 1)\\ngrid_search.fit(df_train[features], df_train['Survived'], eval_set = [(X_val, y_val)], verbose = False )\\n\\n#Print best hyper parameters\\nprint(grid_search.best_params_)\\n\""
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "%%time\n",
    "\n",
    "#split data frame in training and validation dataframes\n",
    "X_train, X_val, y_train, y_val = train_test_split(df_train[features], df_train['Survived'], train_size = 0.7, random_state = seed)\n",
    "\n",
    "#Declare parameters for tunning\n",
    "param_grid = {\n",
    "    'n_estimators' : [50, 100, 150, 200 ],\n",
    "    'min_child_weight': [1, 3 ,5 , 7 ],\n",
    "    'learning_rate': [0.01, 0.05, 0.1 ],\n",
    "    'max_depth' : [1, 3, 5, 7 ],\n",
    "    'colsample_bytree' : [0.6, 0.8, 1.0 ],\n",
    "    'reg_alpha': [0, 0.1, 1, 10],\n",
    "    'early_stopping_rounds': [10, 15, 20]\n",
    "}\n",
    "\n",
    "#Declare Object xgb from XGBClassifier\n",
    "xgb = XGBClassifier()\n",
    "\n",
    "#Create stratification variable\n",
    "cv_strat = StratifiedKFold(n_splits = 5, shuffle = True, random_state = seed)\n",
    "#Use GridSearchCV to find best hyperparameters\n",
    "grid_search = GridSearchCV(xgb, cv = cv_strat, param_grid = param_grid, n_jobs = -1, verbose = 1)\n",
    "grid_search.fit(df_train[features], df_train['Survived'], eval_set = [(X_val, y_val)], verbose = False )\n",
    "\n",
    "#Print best hyper parameters\n",
    "print(grid_search.best_params_)\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "9326a8bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:46.018430Z",
     "iopub.status.busy": "2024-09-06T10:04:46.018010Z",
     "iopub.status.idle": "2024-09-06T10:04:46.023579Z",
     "shell.execute_reply": "2024-09-06T10:04:46.022460Z"
    },
    "papermill": {
     "duration": 0.033655,
     "end_time": "2024-09-06T10:04:46.026019",
     "exception": false,
     "start_time": "2024-09-06T10:04:45.992364",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "xgb_model = XGBClassifier(colsample_bytree= 0.6,\n",
    "                          early_stopping_rounds=10, \n",
    "                          learning_rate= 0.1,\n",
    "                          max_depth= 7,\n",
    "                          min_child_weight=5,\n",
    "                          n_estimators= 200,\n",
    "                          reg_alpha= 0,\n",
    "                          random_state= seed,\n",
    "                          objective= 'binary:logistic')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17fba19e",
   "metadata": {
    "papermill": {
     "duration": 0.02343,
     "end_time": "2024-09-06T10:04:46.073356",
     "exception": false,
     "start_time": "2024-09-06T10:04:46.049926",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 5. Training and evaluating model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "4e53557c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:46.122209Z",
     "iopub.status.busy": "2024-09-06T10:04:46.121821Z",
     "iopub.status.idle": "2024-09-06T10:04:46.134119Z",
     "shell.execute_reply": "2024-09-06T10:04:46.132981Z"
    },
    "papermill": {
     "duration": 0.039571,
     "end_time": "2024-09-06T10:04:46.136617",
     "exception": false,
     "start_time": "2024-09-06T10:04:46.097046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_val, y_train, y_val = train_test_split(df_train[features], df_train['Survived'], train_size = 0.7, random_state = seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "f7f9c271",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:46.186919Z",
     "iopub.status.busy": "2024-09-06T10:04:46.185921Z",
     "iopub.status.idle": "2024-09-06T10:04:46.193255Z",
     "shell.execute_reply": "2024-09-06T10:04:46.192277Z"
    },
    "papermill": {
     "duration": 0.035034,
     "end_time": "2024-09-06T10:04:46.195380",
     "exception": false,
     "start_time": "2024-09-06T10:04:46.160346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Number of folds\n",
    "N = 3\n",
    "\n",
    "#Creating a dataframe for storing the multiple folds' probability of one, in other words, probability of survival for predicting val set and test set\n",
    "test_probs_of_one = pd.DataFrame(np.zeros((len(df_test), N)), columns= ['Fold_{}'.format(i) for i in range(1, N + 1)])\n",
    "\n",
    "#Creating a dataframe for storing feature importances\n",
    "feature_importances = pd.DataFrame(np.zeros((X_train.shape[1], N)), columns=['Fold_{}'.format(i) for i in range(1, N + 1)], index=features)\n",
    "\n",
    "# create empty lists to store the predictions and scores for each fold\n",
    "fold_train_scores = []\n",
    "fold_val_scores = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "2f5e37f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:46.244257Z",
     "iopub.status.busy": "2024-09-06T10:04:46.243350Z",
     "iopub.status.idle": "2024-09-06T10:04:46.248588Z",
     "shell.execute_reply": "2024-09-06T10:04:46.247537Z"
    },
    "papermill": {
     "duration": 0.032049,
     "end_time": "2024-09-06T10:04:46.250729",
     "exception": false,
     "start_time": "2024-09-06T10:04:46.218680",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "skf = StratifiedKFold(n_splits=N, shuffle=True, random_state=seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "1c6dacb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:46.299959Z",
     "iopub.status.busy": "2024-09-06T10:04:46.298767Z",
     "iopub.status.idle": "2024-09-06T10:04:46.761553Z",
     "shell.execute_reply": "2024-09-06T10:04:46.760673Z"
    },
    "papermill": {
     "duration": 0.490062,
     "end_time": "2024-09-06T10:04:46.764024",
     "exception": false,
     "start_time": "2024-09-06T10:04:46.273962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We are working with the fold #1\n",
      "0.8459069020866774\n",
      "Fold 1 train score: 0.8459069020866774\n",
      "Fold 1 validation score: 0.7873134328358209\n",
      "\n",
      "We are working with the fold #2\n",
      "0.8667736757624398\n",
      "Fold 2 train score: 0.8667736757624398\n",
      "Fold 2 validation score: 0.8208955223880597\n",
      "\n",
      "We are working with the fold #3\n",
      "0.8667736757624398\n",
      "Fold 3 train score: 0.8667736757624398\n",
      "Fold 3 validation score: 0.8134328358208955\n",
      "\n",
      "Average train score across 3 folds: 0.8598180845371856\n",
      "Average val score across 3 folds: 0.8072139303482588\n"
     ]
    }
   ],
   "source": [
    "for fold, (train_idx, val_idx) in enumerate(skf.split(X_train, y_train)):\n",
    "    \n",
    "    if fold > 0:\n",
    "        print(\"\")\n",
    "    print('We are working with the fold #'+ str((fold+1)))\n",
    "    \n",
    "      # select the train and validation data and labels for this fold\n",
    "    fold_X_train, fold_y_train = X_train.iloc[train_idx], y_train.iloc[train_idx]\n",
    "    fold_X_val, fold_y_val = X_train.iloc[val_idx], y_train.iloc[val_idx]\n",
    "    \n",
    "    # Fitting model using train and validation fold set\n",
    "    xgb_model.fit(fold_X_train, fold_y_train, eval_set = [(fold_X_val, fold_y_val)], verbose = False)\n",
    "    \n",
    "    # Let's register feature importances for this fold in the feature_importances dataframe we created earlier\n",
    "    feature_importances.iloc[:, fold] = xgb_model.feature_importances_\n",
    "    \n",
    "    #Let's save the fold score with train data\n",
    "    fold_score_training = xgb_model.score(X_train, y_train)\n",
    "    print(fold_score_training)\n",
    "    fold_train_scores.append(fold_score_training)\n",
    "    print(f\"Fold {fold + 1} train score: {fold_score_training}\")\n",
    "    \n",
    "    fold_score_validation = xgb_model.score(X_val, y_val)\n",
    "    fold_val_scores.append(fold_score_validation)\n",
    "    print(f\"Fold {fold + 1} validation score: {fold_score_validation}\")\n",
    "    \n",
    "    #Now let's predict values on the test data\n",
    "    test_probs_of_one.loc[:,'Fold_{}'.format(fold+1)] = xgb_model.predict_proba(df_test[features])[:, 1]\n",
    "\n",
    "# calculate the average accuracy score across all folds\n",
    "avg_train_score = sum(fold_train_scores) / N \n",
    "avg_val_score = sum(fold_val_scores) / N \n",
    "    \n",
    "print(f\"\\nAverage train score across {N} folds: {avg_train_score}\")\n",
    "print(f\"Average val score across {N} folds: {avg_val_score}\")\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6800dd31",
   "metadata": {
    "papermill": {
     "duration": 0.02407,
     "end_time": "2024-09-06T10:04:46.812245",
     "exception": false,
     "start_time": "2024-09-06T10:04:46.788175",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 6. Submition file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "bf746d10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:46.861069Z",
     "iopub.status.busy": "2024-09-06T10:04:46.860700Z",
     "iopub.status.idle": "2024-09-06T10:04:46.871741Z",
     "shell.execute_reply": "2024-09-06T10:04:46.870634Z"
    },
    "papermill": {
     "duration": 0.038265,
     "end_time": "2024-09-06T10:04:46.874210",
     "exception": false,
     "start_time": "2024-09-06T10:04:46.835945",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fold_1</th>\n",
       "      <th>Fold_2</th>\n",
       "      <th>Fold_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.076595</td>\n",
       "      <td>0.078611</td>\n",
       "      <td>0.103100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.418231</td>\n",
       "      <td>0.520861</td>\n",
       "      <td>0.460144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.079642</td>\n",
       "      <td>0.031691</td>\n",
       "      <td>0.064962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.062799</td>\n",
       "      <td>0.058900</td>\n",
       "      <td>0.077772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.468046</td>\n",
       "      <td>0.494366</td>\n",
       "      <td>0.444017</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Fold_1    Fold_2    Fold_3\n",
       "0  0.076595  0.078611  0.103100\n",
       "1  0.418231  0.520861  0.460144\n",
       "2  0.079642  0.031691  0.064962\n",
       "3  0.062799  0.058900  0.077772\n",
       "4  0.468046  0.494366  0.444017"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_probs_of_one.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "9a4919c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:46.928309Z",
     "iopub.status.busy": "2024-09-06T10:04:46.927241Z",
     "iopub.status.idle": "2024-09-06T10:04:46.942138Z",
     "shell.execute_reply": "2024-09-06T10:04:46.941021Z"
    },
    "papermill": {
     "duration": 0.044449,
     "end_time": "2024-09-06T10:04:46.945107",
     "exception": false,
     "start_time": "2024-09-06T10:04:46.900658",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fold_1</th>\n",
       "      <th>Fold_2</th>\n",
       "      <th>Fold_3</th>\n",
       "      <th>avg_prob_of_one</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.076595</td>\n",
       "      <td>0.078611</td>\n",
       "      <td>0.103100</td>\n",
       "      <td>0.086102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.418231</td>\n",
       "      <td>0.520861</td>\n",
       "      <td>0.460144</td>\n",
       "      <td>0.466412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.079642</td>\n",
       "      <td>0.031691</td>\n",
       "      <td>0.064962</td>\n",
       "      <td>0.058765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.062799</td>\n",
       "      <td>0.058900</td>\n",
       "      <td>0.077772</td>\n",
       "      <td>0.066490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.468046</td>\n",
       "      <td>0.494366</td>\n",
       "      <td>0.444017</td>\n",
       "      <td>0.468810</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Fold_1    Fold_2    Fold_3  avg_prob_of_one\n",
       "0  0.076595  0.078611  0.103100         0.086102\n",
       "1  0.418231  0.520861  0.460144         0.466412\n",
       "2  0.079642  0.031691  0.064962         0.058765\n",
       "3  0.062799  0.058900  0.077772         0.066490\n",
       "4  0.468046  0.494366  0.444017         0.468810"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_probs_of_one['avg_prob_of_one']=(test_probs_of_one.sum(axis=1)/N)\n",
    "test_probs_of_one.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "a8af6ee7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:46.995485Z",
     "iopub.status.busy": "2024-09-06T10:04:46.995019Z",
     "iopub.status.idle": "2024-09-06T10:04:47.008925Z",
     "shell.execute_reply": "2024-09-06T10:04:47.007787Z"
    },
    "papermill": {
     "duration": 0.041833,
     "end_time": "2024-09-06T10:04:47.011406",
     "exception": false,
     "start_time": "2024-09-06T10:04:46.969573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fold_1</th>\n",
       "      <th>Fold_2</th>\n",
       "      <th>Fold_3</th>\n",
       "      <th>avg_prob_of_one</th>\n",
       "      <th>pred</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.076595</td>\n",
       "      <td>0.078611</td>\n",
       "      <td>0.103100</td>\n",
       "      <td>0.086102</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.418231</td>\n",
       "      <td>0.520861</td>\n",
       "      <td>0.460144</td>\n",
       "      <td>0.466412</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.079642</td>\n",
       "      <td>0.031691</td>\n",
       "      <td>0.064962</td>\n",
       "      <td>0.058765</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.062799</td>\n",
       "      <td>0.058900</td>\n",
       "      <td>0.077772</td>\n",
       "      <td>0.066490</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.468046</td>\n",
       "      <td>0.494366</td>\n",
       "      <td>0.444017</td>\n",
       "      <td>0.468810</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Fold_1    Fold_2    Fold_3  avg_prob_of_one  pred\n",
       "0  0.076595  0.078611  0.103100         0.086102     0\n",
       "1  0.418231  0.520861  0.460144         0.466412     0\n",
       "2  0.079642  0.031691  0.064962         0.058765     0\n",
       "3  0.062799  0.058900  0.077772         0.066490     0\n",
       "4  0.468046  0.494366  0.444017         0.468810     0"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "threshold= 0.5\n",
    "test_probs_of_one['pred']= test_probs_of_one['avg_prob_of_one'].apply(lambda x: 1 if x>= threshold else 0)\n",
    "test_probs_of_one.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "5119562e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:04:47.062123Z",
     "iopub.status.busy": "2024-09-06T10:04:47.061757Z",
     "iopub.status.idle": "2024-09-06T10:04:47.077931Z",
     "shell.execute_reply": "2024-09-06T10:04:47.076920Z"
    },
    "papermill": {
     "duration": 0.043994,
     "end_time": "2024-09-06T10:04:47.080108",
     "exception": false,
     "start_time": "2024-09-06T10:04:47.036114",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived\n",
       "0          892         0\n",
       "1          893         0\n",
       "2          894         0\n",
       "3          895         0\n",
       "4          896         0"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission_df = pd.DataFrame(columns=['PassengerId', 'Survived'])\n",
    "submission_df['PassengerId'] = df_test['PassengerId']\n",
    "submission_df['Survived'] = test_probs_of_one['pred'].values\n",
    "submission_df.to_csv('submission.csv', index=False)\n",
    "submission_df.head()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 26502,
     "sourceId": 3136,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15.992004,
   "end_time": "2024-09-06T10:04:47.725609",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-06T10:04:31.733605",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
